{"version":3,"sources":["webpack:///./index.js"],"names":["input","document","getElementById","country_single","country_list","alertMessage","text","type","stackBottomModal","Stack","dir1","push","modal","context","alert","width","hide","delay","animateSpeed","shadow","animation","addClass","stack","countryList","data","map","country","innerHTML","name","countryBlock","flag","capital","population","langList","languages","lang","join","url","fetch","res","json","console","log","status","style","display","length","addEventListener","_","debounce","evt","target","value","getAllFavorites"],"mappings":"0iBAOA,IAAMA,EAAQC,SAASC,eAAe,WAChCC,EAAiBF,SAASC,eAAe,kBACzCE,EAAeH,SAASC,eAAe,gBAG7C,SAASG,EAAaC,EAAMC,GAC1B,IAAMC,EAAmB,IAAIC,QAAM,CACjCC,KAAM,KACNC,KAAM,SACNC,OAAO,EACPC,QAASZ,SAASC,eAAe,YAEnCY,gBAAM,CACJR,KAAMA,EACNS,MAAO,OACPR,KAAMA,EACNS,MAAM,EACNC,MAAO,IACPC,aAAc,OACdC,QAAQ,EACRC,UAAW,OACXC,SAAU,gBACVC,MAAOd,IAKX,IAAMe,EAAc,SAAAC,GAAI,OAAIA,EAAKC,KAAI,SAAAC,GAAO,OAAItB,EAAauB,WAAb,OAAiCD,EAAQE,KAAzC,YAG1CC,EAAe,SAAC,GAAiD,IAAhDC,EAAgD,EAAhDA,KAAMF,EAA0C,EAA1CA,KAAMG,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,WACtCC,EADiE,EAAfC,UAC7BT,KAAI,SAAAU,GAAI,OAAIA,EAAKP,QAAMQ,KAAK,MACrDjC,EAAewB,UAAf,qBAEgBG,EAFhB,gGAIqCF,EAJrC,mDAKqCG,EALrC,sDAMwCC,EANxC,qDAOuCC,EAPvC,gC,iDAaF,WAA+BI,GAA/B,iHAEoBC,MAAM,yCAAyCD,GAFnE,cAEQE,EAFR,gBAGqBA,EAAIC,OAHzB,UAGQhB,EAHR,OAIIiB,QAAQC,IAAI,WAAYlB,GACJ,MAAhBA,EAAKmB,OALb,wBAMMxC,EAAeyC,MAAMC,QAAU,OAC/BzC,EAAawC,MAAMC,QAAU,OAPnC,kBAQaxC,EAAa,gBAAiB,UAR3C,aAUQmB,EAAKsB,OAAS,GAVtB,wBAWMvB,EAAYC,GACZpB,EAAawC,MAAMC,QAAU,QAC7B1C,EAAeyC,MAAMC,QAAU,OAbrC,kBAcaxC,EAAa,yCAA0C,WAdpE,QAgBwB,IAAhBmB,EAAKsB,SACP1C,EAAawC,MAAMC,QAAU,OAC7BhB,EAAaL,EAAK,IAClBrB,EAAeyC,MAAMC,QAAU,QAnBrC,kDAsBIJ,QAAQC,IAAI,aAAZ,MAtBJ,2D,sBA2BA1C,EAAM+C,iBAAiB,QAASC,IAAEC,UAAS,SAAAC,GACzC,IAAKA,EAAIC,OAAOC,MAAMN,OAGpB,OAFA3C,EAAeyC,MAAMC,QAAU,YAC/BzC,EAAawC,MAAMC,QAAU,S,oCAG/BQ,CAAgBH,EAAIC,OAAOC,SAC1B,Q","file":"main.88f0828e54e9e074686f.js","sourcesContent":["import './styles.css';\nimport '@pnotify/core/dist/BrightTheme.css';\nimport { alert, Stack } from \"@pnotify/core\";\nimport _ from 'lodash'\n\n\n// Refs\nconst input = document.getElementById('country');\nconst country_single = document.getElementById('country_single')\nconst country_list = document.getElementById('country_list');\n\n// Configure and insert Pnotify to the block (#notice)\nfunction alertMessage(text, type) {\n  const stackBottomModal = new Stack({\n    dir1: \"up\",\n    push: \"bottom\",\n    modal: false,\n    context: document.getElementById(\"notice\")\n  });\n  alert({\n    text: text,\n    width: \"auto\",\n    type: type,\n    hide: true,\n    delay: 300,\n    animateSpeed: 'fast',\n    shadow: true,\n    animation: 'fade',\n    addClass: 'active_notice',\n    stack: stackBottomModal\n  });\n}\n\n// Append country items to the list\nconst countryList = data => data.map(country => country_list.innerHTML += `<li>${country.name}</li>`);\n\n// Build the one country block\nconst countryBlock = ({flag, name, capital, population, languages}) => {\n  let langList = languages.map(lang => lang.name).join(', ');\n  country_single.innerHTML =\n    `\n      <img src=\"${flag}\" alt=\"Flag\">\n      <ul class=\"country_single_items\">\n        <li><span>Country: </span><p>${name}</p></li>\n        <li><span>Capital: </span><p>${capital}</p></li>\n        <li><span>Population: </span><p>${population}</p></li>\n        <li><span>Languages: </span><p>${langList}</p></li>\n      </ul>\n    `\n}\n\n// Search the country\nasync function getAllFavorites(url) {\n  try {\n    let res = await fetch(`https://restcountries.eu/rest/v2/name/${url}`);\n    let data = await res.json();\n    console.log('DATA => ', data);\n    if (data.status === 404) {\n      country_single.style.display = 'none';\n      country_list.style.display = 'none';\n      return alertMessage('Wrong country', 'error');\n    }\n    if (data.length > 1) {\n      countryList(data);\n      country_list.style.display = 'block';\n      country_single.style.display = 'none';\n      return alertMessage('Need to make the request more specific', 'notice');\n    }\n    if (data.length === 1) {\n      country_list.style.display = 'none';\n      countryBlock(data[0])\n      country_single.style.display = 'flex';\n    }\n  } catch (err) {\n    console.log('Error ==> ', err);\n  }\n}\n\n// Monitor the input using lodash.debounce, 500ms\ninput.addEventListener('input', _.debounce(evt => {\n  if (!evt.target.value.length) {\n    country_single.style.display = 'none';\n    country_list.style.display = 'none';\n    return;\n  }\n  getAllFavorites(evt.target.value)\n}, 500));\n\n\n"],"sourceRoot":""}